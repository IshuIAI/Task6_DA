-- Users Table
CREATE TABLE USERS (
   USER_ID INT PRIMARY KEY AUTO_INCREMENT,
   NAME VARCHAR(100),
   EMAIL VARCHAR(100) UNIQUE,
   PASSWORD VARCHAR(255),
   CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Categories Table
CREATE TABLE CATEGORIES (
   CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
   NAME VARCHAR(100)
);
-- Products Table
CREATE TABLE PRODUCTS (
   PRODUCT_ID INT PRIMARY KEY AUTO_INCREMENT,
   NAME VARCHAR(100),
   DESCRIPTION TEXT,
   PRICE DECIMAL(10, 2),
   STOCK INT,
   CATEGORY_ID INT,
   FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID)
);
-- Orders Table
CREATE TABLE ORDERS (
   ORDER_ID INT PRIMARY KEY AUTO_INCREMENT,
   USER_ID INT,
   ORDER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   TOTAL_AMOUNT DECIMAL(10, 2),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
-- OrderItems Table
CREATE TABLE ORDERITEMS (
   ORDERITEM_ID INT PRIMARY KEY AUTO_INCREMENT,
   ORDER_ID INT,
   PRODUCT_ID INT,
   QUANTITY INT,
   PRICE DECIMAL(10, 2),
   FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
   FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
);

-- Insert sample users
INSERT INTO USERS (NAME, EMAIL, PASSWORD) VALUES
('Alice Johnson', 'alice.j@example.com', 'hash123'),
('Bob Smith', 'bob.s@example.com', 'hash456'),
('Charlie Brown', 'charlie.b@example.com', 'hash789');

-- Insert sample categories
INSERT INTO CATEGORIES (NAME) VALUES
('Electronics'),
('Books'),
('Home Goods'),
('Apparel');

-- Insert sample products
INSERT INTO PRODUCTS (NAME, DESCRIPTION, PRICE, STOCK, CATEGORY_ID) VALUES
('Smartphone', 'A latest model smartphone.', 799.99, 25, 1),
('Laptop', 'A powerful notebook computer.', 1200.00, 15, 1),
('The Great Gatsby', 'A classic novel by F. Scott Fitzgerald.', 15.50, 150, 2),
('Coffee Maker', 'An automatic coffee brewing machine.', 45.00, 75, 3),
('T-Shirt', 'A simple cotton t-shirt.', 20.00, 200, 4),
('Bluetooth Speaker', 'A portable wireless speaker.', 50.00, 40, 1),
('The Hobbit', 'A fantasy novel by J.R.R. Tolkien.', 12.99, 80, 2);

-- Insert sample orders
INSERT INTO ORDERS (USER_ID, TOTAL_AMOUNT) VALUES
(1, 815.49),
(2, 45.00),
(1, 1200.00),
(3, 32.99);

-- Insert sample order items
INSERT INTO ORDERITEMS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES
(1, 1, 1, 799.99),
(1, 5, 1, 20.00),
(2, 4, 1, 45.00),
(3, 2, 1, 1200.00),
(4, 3, 1, 15.50),
(4, 7, 1, 12.99);

SELECT C.NAME AS CATEGORY_NAME, SUM(P.STOCK) AS TOTAL_STOCK FROM PRODUCTS P JOIN CATEGORIES 
C ON P.CATEGORY_ID = C.CATEGORY_ID GROUP BY C.NAME HAVING SUM(P.STOCK) > 50 ORDER BY 
TOTAL_STOCK DESC;
SELECT U.NAME AS USER_NAME, U.EMAIL, O.TOTAL_AMOUNT, O.ORDER_DATE FROM USERS U INNER JOIN
ORDERS O ON U.USER_ID = O.USER_ID;
SELECT P.NAME AS PRODUCT_NAME, C.NAME AS CATEGORY_NAME FROM PRODUCTS P LEFT JOIN CATEGORIES
C ON P.CATEGORY_ID = C.CATEGORY_ID;
SELECT C.NAME AS CATEGORY_NAME, P.NAME AS PRODUCT_NAME FROM PRODUCTS P RIGHT JOIN CATEGORIES
C ON P.CATEGORY_ID = C.CATEGORY_ID;
SELECT NAME, EMAIL FROM USERS WHERE USER_ID IN (SELECT DISTINCT USER_ID FROM ORDERS);
SELECT SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE, AVG(TOTAL_AMOUNT) AS AVERAGE_ORDER_AMOUNT, 
COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS_SOLD FROM ORDERS;
CREATE VIEW USER_ORDER_DETAILS AS SELECT U.NAME AS USER_NAME, O.ORDER_DATE, P.NAME AS 
PRODUCT_NAME, OI.QUANTITY, OI.PRICE AS UNIT_PRICE, (OI.QUANTITY * OI.PRICE) AS ITEM_TOTAL
FROM ORDERITEMS OI JOIN ORDERS O ON OI.ORDER_ID = O.ORDER_ID JOIN USERS U ON O.USER_ID = 
U.USER_ID JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID;
CREATE INDEX IDX_ORDERS_USER_ID ON ORDERS(USER_ID);
CREATE INDEX IDX_ORDERITEMS_ORDER_ID ON ORDERITEMS(ORDER_ID);
CREATE INDEX IDX_ORDERITEMS_PRODUCT_ID ON ORDERITEMS(PRODUCT_ID);

-- TASK_6
SELECT EXTRACT(YEAR FROM O.ORDER_DATE) AS SALES_YEAR, EXTRACT(MONTH FROM O.ORDER_DATE) AS SALES_MONTH, SUM(O.TOTAL_AMOUNT) AS MONTHLY_REVENUE, COUNT(DISTINCT O.ORDER_ID) AS ORDER_VOLUME FROM
ORDERS O GROUP BY SALES_YEAR, SALES_MONTH ORDER BY SALES_YEAR, SALES_MONTH;
SELECT C.NAME AS CATEGORY_NAME, SUM(P.STOCK) AS TOTAL_STOCK_QUANTITY, SUM(P.STOCK * P.PRICE) AS ESTIMATE_STOCK_VALUE FROM PRODUCTS P JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID GROUP BY 
C.NAME ORDER BY TOTAL_STOCK_QUANTITY DESC;
SELECT P.NAME AS PRODUCT_NAME, SUM(OI.QUANTITY) AS TOTAL_QUANTITY_SOLD FROM ORDERITEMS OI JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID GROUP BY P.NAME ORDER BY TOTAL_QUANTITY_SOLD DESC LIMIT 5;
SELECT U.NAME AS CUSTOMER_NAME, U.EMAIL AS CUSTOMER_EMAIL, SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT FROM USERS U JOIN ORDERS O ON U.USER_ID = O.USER_ID GROUP BY U.USER_ID, U.NAME, U.EMAIL ORDER BY 
TOTAL_SPENT DESC;
SELECT O.ORDER_ID, O.ORDER_DATE, O.TOTAL_AMOUNT, COUNT(OI.PRODUCT_ID) AS UNIQUE_PRODUCTS_COUNT FROM ORDERS O JOIN ORDERITEMS OI ON O.ORDER_ID = OI.ORDER_ID GROUP BY O.ORDER_ID, O.ORDER_DATE, 
O.TOTAL_AMOUNT HAVING COUNT(OI.PRODUCT_ID) > 1;
